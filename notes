


(use-modules (annotation) (annotation main) 
    (annotation gene-go) 
    (annotation biogrid) 
    (annotation gene-pathway)
    (annotation functions) 
    (annotation util)
    (annotation parser)
    (json))
(use-modules (opencog))
(define start (current-time))
(primitive-load "/home/ubuntu/datasets/smpdb_chebi_wname.scm")
(- (current-time) start)

(define start (current-time))
(gene-go-annotation '("IGF1") "biological_process molecular_function cellular_component")
(- (current-time) start)

(use-modules (opencog persist) (opencog persist-sql))
(use-modules (opencog cogserver))
(start-cogserver)

(sql-open "postgres:///biosci")

(sql-create "postgres:///biosci")

(define start (current-time))
(store-atomspace)
(- (current-time) start)

NCBI2Reactome_PE_Pathway.txt.scm
(define start (current-time))
(load-atomspace)
(- (current-time) start)

value at takes the longest


================

SQLBulk.cc:296
insert async_buffer.h:457

31 do_stats blocked on AtomTable::getSize lock

SQLAtomStorage::not_yet_stored SQLAtomStore.cc:138 blocked 6+ threads
28 AtomTable::lookupHandle AtomTable.cc:199 blocked in TLB::addAtom
.. deadlocked !??

table.foreachHandleByType(
getHandleSetByType ... yes, deadlock...


Took 7 secs to load biogridgene2uniprot.scm
Loaded 147750 atoms (21107.14285714286 per sec) total atoms=147750
Took 323 secs to load biogrid_gene_gene_174.scm
Took 280 secs to load biogrid_gene_gene_174.scm
Took 269 secs to load biogrid_gene_gene_174.scm
Loaded 2371502 atoms (8469.65 per sec) total atoms=2519252
Loaded 2371502 atoms (7342.111455108359 per sec) total atoms=2519252
Took 6 secs to load ChEBI2Reactome_PE_Pathway.txt.scm
Loaded 40356 atoms (6726.0 per sec) total atoms=2559608
Took 2 secs to load current_symbols.scm
Loaded 35183 atoms (17591.5 per sec) total atoms=2594791
Took 33 secs to load entrez_to_protein.scm
Loaded 414945 atoms (12574.09090909091 per sec) total atoms=3009736
Took 47 secs to load GO_annotation.scm
Took 43 secs to load GO_annotation.scm
Loaded 357348 atoms (7603.148936170212 per sec) total atoms=3367084
Took 28 secs to load GO_without_def.scm
Took 23 secs to load GO_without_def.scm
Loaded 374126 atoms (13361.642857142857 per sec) total atoms=3741210
Took 20 secs to load NCBI2Reactome_PE_Pathway.txt.scm
Loaded 141084 atoms (7054.2 per sec) total atoms=3882294
Took 1 secs to load reactome.scm
Loaded 9516 atoms (9516.0 per sec) total atoms=3891810
Took 208 secs to load smpdb_chebi_wname.scm
Took 199 secs to load smpdb_chebi_wname.scm
Loaded 972075 atoms (4884.798994974874 per sec) total atoms=5617296
Loaded 972076 atoms (4673.442307692308 per sec) total atoms=4863886
Took 144 secs to load smpdb_protein.scm
Loaded 756272 atoms (5251.888888888889 per sec) total atoms=5620158
Took 9 secs to load uniprot2GO.scm
Loaded 38036 atoms (4226.222222222223 per sec) total atoms=5658194
Took 19 secs to load UniProt2Reactome_PE_Pathway.txt.scm
Loaded 149757 atoms (7881.9473684210525 per sec) total atoms=5807951
Took 8 secs to load current/biogridgene2uniprot.scm
Loaded 30 atoms (3.75 per sec) total atoms=5807981
Took 178 secs to load current/biogrid_gene_gene_3.5.177.scm
Took 146 secs to load current/biogrid_gene_gene_3.5.177.scm
Loaded 448199 atoms (2517.9719101123596 per sec) total atoms=6256180
Took 4 secs to load current/ChEBI2Reactome_PE_Pathway.txt.scm
Loaded 9922 atoms (2480.5 per sec) total atoms=6266102
Took 33 secs to load current/entrez_to_protein.scm
Loaded 13780 atoms (417.57575757575756 per sec) total atoms=6279882
Took 25 secs to load current/GO.scm
Loaded 2806 atoms (112.24 per sec) total atoms=6282688
Took 93 secs to load current/GO_annotation.scm
Took 81 secs to load current/GO_annotation.scm
Loaded 16093 atoms (173.04301075268816 per sec) total atoms=6298781
Loaded 16093 atoms (198.679012345679 per sec) total atoms=4382664
Took 15 secs to load current/NCBI2Reactome_PE_Pathway.txt.scm
Loaded 14532 atoms (968.8 per sec) total atoms=6313313
Took 1 secs to load current/reactome.scm
Loaded 67 atoms (67.0 per sec) total atoms=6313380
Took 11 secs to load current/uniprot2GO.scm
Loaded 94709 atoms (8609.90909090909 per sec) total atoms=6408089
Took 17 secs to load current/UniProt2Reactome_PE_Pathway.txt.scm
Loaded 0 atoms (0.0 per sec) total atoms=6408089


--- a/env
+++ /dev/null
@@ -1,12 +0,0 @@
-#!/bin/sh
-abs_top_srcdir="`cd "/opt" > /dev/null; pwd`"
-abs_top_builddir="`cd "/opt" > /dev/null; pwd`"
-
-GUILE_LOAD_COMPILED_PATH="$abs_top_builddir${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_LOAD_COMPILED_PATH"
-GUILE_LOAD_PATH="$abs_top_builddir:$abs_top_srcdir${GUILE_LOAD_PATH:+:}:$GUILE_LOAD_PATH"
-export GUILE_LOAD_COMPILED_PATH GUILE_LOAD_PATH
-
-PATH="$abs_top_builddir:$PATH"
-export PATH
-
-exec "$@"

--- a/env.in
+++ /dev/null
@@ -1,12 +0,0 @@
-#!/bin/sh
-abs_top_srcdir="`cd "@abs_top_srcdir@" > /dev/null; pwd`"
-abs_top_builddir="`cd "@abs_top_builddir@" > /dev/null; pwd`"
-
-GUILE_LOAD_COMPILED_PATH="$abs_top_builddir${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_LOAD_COMPILED_PATH"
-GUILE_LOAD_PATH="$abs_top_builddir:$abs_top_srcdir${GUILE_LOAD_PATH:+:}:$GUILE_LOAD_PATH"
-export GUILE_LOAD_COMPILED_PATH GUILE_LOAD_PATH
-
-PATH="$abs_top_builddir:$PATH"
-export PATH
-
-exec "$@"


-AM_SCM_LOG_DRIVER_FLAGS = --brief=yes
-
-AM_SCM_LOG_FLAGS = --no-auto-compile -L $(top_srcdir)
-
:q

gene-go-annotation


find-go-term
find-proteins-goterm

(find-go-term (GeneNode gene) (string-split namespace #\ ) parents)
(find-go-term (GeneNode "MAGI2")
  (list "biological_process" "molecular_function" "cellular_component") 0)


find-pathway-genes

duuude pathway=(ConceptNode "R-HSA-6799198")
 go=(ListLink
)

duuude in ad-pathway path=(ConceptNode "R-HSA-6799198")
 gene=(GeneNode "ECSIT")
 go=(ListLink
)

node-info ?
locate-node? .. no print ...

find-go-term

crash in locate-node
 in scm: filter-loc

(use-modules (annotation util))

(locate-node (GeneNode "NDUFA1"))
(locate-node (GeneNode "NDUFV1"))

   (ExecutionLink
      (SchemaNode "scm: filter-loc")
      (ListLink
         (GeneNode "NDUFA1")
         (ConceptNode "GO:0016021")
      )
   )
(use-modules (opencog exec))
(define gene-node (GeneNode "NDUFV1"))
(define nobl (BindLink
        (VariableNode "$go")
        (AndLink
          (MemberLink gene-node (VariableNode "$go"))
          (EvaluationLink (PredicateNode "GO_namespace")
            (ListLink
              (VariableNode "$go")
              (ConceptNode "cellular_component"))))
        (Execution (Schema "scm: filter-loc")
            (List gene-node (VariableNode "$go")))))

(define filt-set (cog-outgoing-set (cog-execute! nobl)))

(define (cal ex) (define li (gdr ex))
	(filter-loc (cog-outgoing-atom li 0) (cog-outgoing-atom li 1)))

(for-each cal filt-set)

OK, so it doesn't crash the second time!?


Wait, now the stack trace says
In annotation/gene-pathway.scm:
   115:32 16 (_ _)
In annotation/functions.scm:
   301:22 15 (find-pathway-genes _ _)

h, same sas before...

(use-modules (statprof))
(statprof (lambda() (load-all) #f))

(statprof (lambda() (stuff) #f) #:count-calls? #t)

  0.00     39.37      0.00  347770  ice-9/boot-9.scm:220:5:map1
  0.00     19.76      0.00  129892  ice-9/psyntax.scm:332:10

(get-internal-real-time) seems to be nanosecs

(define actr (accum-time "foo"))
(define bctr (accum-time "bar"))

      (define actr (accum-time \"foo\"))
      (define bctr (accum-time \"bar\"))
      (actr #:enter? #t)

(define smpdb-ctr (accum-time "smpdb"))
(define reactome-ctr (accum-time "reactome"))
(define find-pathway-genes-ctr (accum-time "find-pathway-genes"))
(define add-pathway-genes-ctr (accum-time "add-pathway-genes"))
(define find-go-term-ctr (accum-time "find-go-term"))
(define find-memberln-ctr (accum-time "find-memberln"))
(define add-go-info-ctr (accum-time "add-go-info"))
(define find-parent-ctr (accum-time "find-parent"))

(smpdb-ctr #:report? #t)
(reactome-ctr #:report? #t)
(find-pathway-genes-ctr #:report? #t) ; yes
(add-pathway-genes-ctr #:report? #t) ; yes
(find-go-term-ctr #:report? #t)
(find-memberln-ctr #:report? #t)
(add-go-info-ctr #:report? #t)
(find-parent-ctr #:report? #t)

Time: 0.0373287 secs. calls: 1 avg:  37328.7 usec/call for smpdb
Time: 94.282941 secs. calls: 1 avg: 94282940.8 usec/call for reactome
Time: 9.7742674 secs. calls: 3 avg: 3258089.1 usec/call for find-pathway-genes
Time: 9.2660640 secs. calls: 267 avg:  34704.4 usec/call for add-pathway-genes


go-info

find-pathway-member
pathway-gene-interactors
pathway-hierarchy
find-protein
find-mol

generate-interactors
biogrid-pairs-pathway

(define-public biogrid-pairs-pathway-ctr (accum-time "biogrid-pairs-pathway"))

HSP90B1 AP1G1 PPIB NDUFAF7 RBM5 

Time: 258.21071 secs. calls: 6 avg: 43035118.8 usec/call for smpdb
Time: 372.90087 secs. calls: 6 avg: 62150145.4 usec/call for reactome
Time: 116.43059 secs. calls: 29 avg: 4014847.9 usec/call for find-pathway-genes
Time: 105.30257 secs. calls: 1423 avg:  74000.4 usec/call for add-pathway-genes
Zero calls to find-go-term
Zero calls to find-memberln
Zero calls to add-go-info
Zero calls to find-parent
Time: 0.0641030 secs. calls: 12 avg:   5341.9 usec/call for find-pathway-member
Time: 425.35330 secs. calls: 29 avg: 14667355.0 usec/call for pathway-gene-interactors
Time: 0.0171103 secs. calls: 14 avg:   1222.2 usec/call for pathway-hierarchy
Time: 1.1350559 secs. calls: 12 avg:  94588.0 usec/call for find-protein
Zero calls to find-protein-form
Time: 88.010315 secs. calls: 58 avg: 1517419.2 usec/call for find-mol
Time: 1.8552350 secs. calls: 1975 avg:    939.4 usec/call for find-pubmed-id


gene-pathway-annotation
smpdb
reactome

so .. stats on bindlinks
and microbench for evaluation lookups.


Hedra Seid <tanksh24@gmail.com>
cc:	Michael Duncan <mjsduncan@gmail.com>,
Abdulrahman Semrie <hsamireh@gmail.com>

pattern matcher-- outgoing by type...

find-name util

(do-anno 0)
(report)
Zero calls to smpdb
Zero calls to reactome
Zero calls to find-pathway-genes
Zero calls to add-pathway-genes
Time: 52.993996 secs. calls: 777 avg:  68203.3 usec/call for find-go-term
Time: 101.73235 secs. calls: 1458 avg:  69775.3 usec/call for find-memberln
Time: 4.4660020 secs. calls: 11047 avg:    404.3 usec/call for add-go-info
Zero calls to find-parent
Zero calls to find-pathway-member
Zero calls to pathway-gene-interactors
Zero calls to pathway-hierarchy
Zero calls to find-protein
Time: 0.3594327 secs. calls: 681 avg:    527.8 usec/call for find-protein-form
Zero calls to find-mol
Zero calls to find-name
Zero calls to find-pubmed-id

(do-anno 1)
Time: 498.92558 secs. calls: 2103 avg: 237244.7 usec/call for find-go-term
Time: 213.82027 secs. calls: 3465 avg:  61708.6 usec/call for find-memberln
Time: 25.569612 secs. calls: 65154 avg:    392.4 usec/call for add-go-info
Time: 384.72846 secs. calls: 18694 avg:  20580.3 usec/call for find-parent
Time: 0.7617738 secs. calls: 1362 avg:    559.3 usec/call for find-protein-form

(do-anno 3)
Time: 1826.1190 secs. calls: 4755 avg: 384041.9 usec/call for find-go-term
Time: 434.04710 secs. calls: 7479 avg:  58035.4 usec/call for find-memberln
Time: 105.34913 secs. calls: 304012 avg:    346.5 usec/call for add-go-info
Time: 1593.4385 secs. calls: 148143 avg:  10756.1 usec/call for find-parent
Time: 1.4674012 secs. calls: 2724 avg:    538.7 usec/call for find-protein-form



filter-loc

wtf:
query-link runs
   extract_variables(_outgoing);
   unbundle_clauses(_body);
   common_init();
   setup_components();
   _pat.redex_name = "anonymous QueryLink";

after patternlink 

OK:
GetLink exec tot=0.006211 calls=100 avg=6.211e-05
QueryLink ctor tot=0.00423 calls=100 avg=4.23e-05
BindLink exec tot=0.05829 calls=100 avg=0.0005829

GetLink exec tot=1.16336 calls=17800 avg=6.53572e-05 = 65 microsecs each
BindLink exec tot=47.4649 calls=13400 avg=0.00354216 = 3.5 millisecs each
QueryLink ctor tot=0.526276 calls=13400 avg=3.92743e-05 = 40 microsecs each

BindLink exec tot=534.667 calls=76600 avg=0.00697999
GetLink exec tot=4.42686 calls=79100 avg=5.59654e-05
QueryLink ctor tot=3.09268 calls=76700 avg=4.03217e-05


Huh...

Time: 0.3252858 secs. calls: 1507 avg:    215.8 usec/call for find-name
[2020-01-06 07:05:22:748] [INFO] duude GetLink exec tot=0.08956 calls=1500 avg=5.97067e-05
[2020-01-06 07:05:22:748] [INFO] duude execat calls=1500 inst=2.58733e-06 exec=6.4306e-05 add=2.374e-06


so 
verify: 2.4 usecs
inst ctor: 2.6usecs
exec 64 usec
adatom=2.4usec

body total: 74 usecs.

arg
Get -> Pattern->Prenex->Rewr->Sco  (can trim skip_init() in Rewr)

so why 215 usec ???

FunctionWrap(ss_execat, "cog-execat!", "exec"));  a_h
is it ss_get_env_as ?? 


         (GetLink
          (VariableNode "$name")  ;; maybe constrain type...

          (EvaluationLink
           (PredicateNode predicate)  "GO_name" "has_name"
           (ListLink
            atom
            (VariableNode "$name")

generate-result-ctr
generate-interactors-ctr
build-interaction-ctr


find-pubmed-id
biogrid-pairs
biogrid-genes


Time: 42.967683 secs. calls: 12 avg: 3580640.2 usec/call for smpdb
Time: 473.42932 secs. calls: 12 avg: 39452443.4 usec/call for reactome
Time: 9.9261857 secs. calls: 39 avg: 254517.6 usec/call for find-pathway-genes
Time: 9.5269167 secs. calls: 1881 avg:   5064.8 usec/call for add-pathway-genes
Time: 0.0888016 secs. calls: 25 avg:   3552.1 usec/call for find-pathway-member
Time: 826.87570 secs. calls: 38 avg: 21759886.8 usec/call for pathway-gene-interactors
Zero calls to generate-result
Time: 384.45394 secs. calls: 22696 avg:  16939.3 usec/call for generate-interactors
Zero calls to build-interaction
Time: 0.1271114 secs. calls: 31 avg:   4100.4 usec/call for pathway-hierarchy
Time: 3.1967965 secs. calls: 24 avg: 133199.9 usec/call for find-protein
Zero calls to find-protein-form
Time: 25.929194 secs. calls: 77 avg: 336742.8 usec/call for find-mol
Time: 3.1772875 secs. calls: 13835 avg:    229.7 usec/call for find-name
Time: 9.9202071 secs. calls: 9506 avg:   1043.6 usec/call for find-pubmed-id
#t


pathway-gene-interactors is the interestng work-horse.
generate-interactors is pointlessly slow.
pathway-gene-interactor 


Do we need to explicitly say sysctl foo vm.hugetlb_shm_group ???
sudo    sysctl -p /etc/sysctl.conf
 seems to be needed....
bt this errors out ... 

useradd  -c "lxc containers" -M -u 101000 -U lxc-tain
usermod -a -G hugepages lxc-tain
groupmod -n lxc-tain lxc
That did nothing ... sp wtfennberg ...

what is reactome returning?


in generate-interactors

biogrid-pairs-pathway returns a list...
it is holding pairs of strings ... 
 The entire biogrid-pairs-pathway is searched to see if a single pair is
in there!!!! Yikes! super inefficient.

and it is used only to determine if the output needs to be done, again,
or not.


(do-one-path "ERCC8")

Did reactome 1 of 681 for TSPAN6 result-len=1 pwlen=1 time=0
Did smpdb 1 of 681 for TSPAN6 result-len=1 time=0
Did reactome 2 of 681 for NDUFAF7 result-len=567 pwlen=2 time=12
Did smpdb 2 of 681 for NDUFAF7 result-len=567 time=0
Did reactome 3 of 681 for RBM5 result-len=3457 pwlen=3 time=95
Did smpdb 3 of 681 for RBM5 result-len=3457 time=1
Did reactome 4 of 681 for SLC7A2 result-len=3564 pwlen=4 time=1
Did smpdb 4 of 681 for SLC7A2 result-len=3954 time=44
Did reactome 5 of 681 for NDUFAB1 result-len=4753 pwlen=5 time=39
Did smpdb 5 of 681 for NDUFAB1 result-len=4753 time=0
Did reactome 6 of 681 for DVL2 result-len=8501 pwlen=6 time=272
Did smpdb 6 of 681 for DVL2 result-len=8501 time=0
Did reactome 7 of 681 for SKAP2 result-len=8562 pwlen=7 time=4
Did smpdb 7 of 681 for SKAP2 result-len=8562 time=0
Did reactome 8 of 681 for DHX33 result-len=8563 pwlen=8 time=0
Did smpdb 8 of 681 for DHX33 result-len=8563 time=0
Did reactome 9 of 681 for MSL3 result-len=9490 pwlen=9 time=56
Did smpdb 9 of 681 for MSL3 result-len=9490 time=0
Did reactome 10 of 681 for BZRAP1 result-len=9816 pwlen=10 time=13
Did smpdb 10 of 681 for BZRAP1 result-len=9816 time=0
Did reactome 11 of 681 for GTF2IRD1 result-len=9817 pwlen=11 time=0
Did smpdb 11 of 681 for GTF2IRD1 result-len=9817 time=1
Did reactome 12 of 681 for IL32 result-len=9882 pwlen=12 time=3
Did smpdb 12 of 681 for IL32 result-len=9882 time=0
Did reactome 13 of 681 for RPS20 result-len=17812 pwlen=13 time=2095
Did smpdb 13 of 681 for RPS20 result-len=21285 time=2795
Did reactome 14 of 681 for SCMH1 result-len=23648 pwlen=14 time=335
Did smpdb 14 of 681 for SCMH1 result-len=23648 time=0
Did reactome 15 of 681 for CLCN6 result-len=23876 pwlen=15 time=14
Did smpdb 15 of 681 for CLCN6 result-len=23876 time=0
Did reactome 16 of 681 for RNF14 result-len=26378 pwlen=16 time=245
Did smpdb 16 of 681 for RNF14 result-len=26378 time=0
Did reactome 17 of 681 for ATP2C1 result-len=26544 pwlen=17 time=14
Did smpdb 17 of 681 for ATP2C1 result-len=26544 time=1
Did reactome 18 of 681 for IGF1 result-len=27429 pwlen=18 time=82
Did smpdb 18 of 681 for IGF1 result-len=27429 time=0
Did reactome 19 of 681 for GLRX2 result-len=27430 pwlen=19 time=0
Did smpdb 19 of 681 for GLRX2 result-len=27430 time=0
Did reactome 20 of 681 for FAS result-len=27704 pwlen=20 time=62
Did smpdb 20 of 681 for FAS result-len=27834 time=17
Did reactome 21 of 681 for ATP6V0A1 result-len=30048 pwlen=21 time=235
Did smpdb 21 of 681 for ATP6V0A1 result-len=30048 time=1
Did reactome 22 of 681 for FBXO42 result-len=30049 pwlen=22 time=0
Did smpdb 22 of 681 for FBXO42 result-len=30049 time=0
Did reactome 23 of 681 for JADE2 result-len=30307 pwlen=23 time=81
Did smpdb 23 of 681 for JADE2 result-len=30307 time=0
Did reactome 24 of 681 for PREX2 result-len=30502 pwlen=24 time=112
Did smpdb 24 of 681 for PREX2 result-len=30502 time=0
Did reactome 25 of 681 for NOP16 result-len=30503 pwlen=25 time=1
Did smpdb 25 of 681 for NOP16 result-len=30503 time=0
Did reactome 26 of 681 for LMO3 result-len=30504 pwlen=26 time=0
Did smpdb 26 of 681 for LMO3 result-len=30504 time=0
Did reactome 27 of 681 for R3HDM1 result-len=30505 pwlen=27 time=0
Did smpdb 27 of 681 for R3HDM1 result-len=30505 time=0

205 minutes == 12300 seconds
but 7085 seecs in gc so (- 12300 7085) = 5215 secs in the code 

check-pathway

match-gene-interactors
find-output-interactors


replace biogrid-pairs by SetLink this will speed generate-result


find-go-term


why zero pathway-gene-interactors 

find-pathway-member
should have find-pathway-genes

failure  in ... find-pathway-genes ... add-pathway-genes ...locate-node

(locate-node (GeneNode "NT5C"))

(define (lon node)
(cog-outgoing-set (cog-execute!
        (BindLink
        (VariableNode "$go")
        (AndLink
          (MemberLink
            node
            (VariableNode "$go"))
          (EvaluationLink
            (PredicateNode "GO_namespace")
            (ListLink
              (VariableNode "$go")
              (ConceptNode "cellular_component")))
        )
        (ExecutionOutputLink
        (GroundedSchemaNode "scm: filter-loc")
          (ListLink
            node
            (VariableNode "$go")
          ))
          )
)))


crash in reactome 

locate-node
add-loc


find-pathway-genes took go paths as last arg.
does nothing passes to add-pathway-genes
find-go-term

Whhhhat?

pathway-gene-interactors is called from ...
smdb ab from reactome
but only if 
smdb -- if (find-pathway-member (GeneNode gene) "SMP")
rectome - if (find-pathway-member (GeneNode gene) "R-HSA")
(ConceptNode

filter-atoms
add-pathway-info
node-info

node is (cog-outgoing-atom (cog-outgoing-atom path 0) 1)
which is pathway, and not gene...




classic form:
find-protein-form
pathway-gene-interactors

find-output-interactors is speeded by cac by 11767/9444 = 1.25x faster

find-go-term
find-parent

(define (bar x)
	(format #t "Called bar with ~A\n" x)
	(+ x 1))

(define (memoize FUNC)
"
  memoize a function FUNC which takes a single int as argument
"
	(define cache (make-hash-table))
   (define (int-hash INT SZ) (modulo INT SZ))
   (define (int-assoc INT ILIST)
      (find (lambda (pr) (equal? INT (car pr))) ILIST))

   (lambda (ITEM)
      (define val (hashx-ref int-hash int-assoc cache ITEM))
      (if val val
         (let ((fv (FUNC ITEM)))
            (hashx-set! int-hash int-assoc cache ITEM fv)
            fv)))
)

(define bar-memo (memoize bar))

(define barco
	(let ((cval #f))
	(lambda (x)
		(if (not cval) (set! cval (bar x)))
		cval)))

(define-syntax foo
	(syntax-rules ()
		((foo exp)
			(if (symbol? (quote exp))
				(begin (display "its a symb\n") (bar exp))
				(begin (display "no its not\n") (bar-memo exp))))))
--------------------------------

; The function in question. It needs to become a runtime
; constant, for constant arguments.
(define (bar x)
	(format #t "Called bar with ~A\n" x)
	(+ x 1))

; Memoization boilerplate
(define cache (make-hash-table))
(define (int-hash INT SZ) (modulo INT SZ))
(define (int-assoc INT ILIST)
	(find (lambda (pr) (equal? INT (car pr))) ILIST))

(define-syntax foob
	(syntax-rules ()
		((foob EXP)
			(let ((junk (format #t "A hash lookup is happening for ~A\n" EXP))
					(const-val (hashx-ref int-hash int-assoc cache EXP)))
				(if (symbol? (quote EXP))
					(begin (display "Its a symbol\n") (bar EXP))
					(begin
						(display "It's a constant!\n") 
      				(if (not const-val)
							(begin
								(set! const-val (bar EXP))
            				(hashx-set! int-hash int-assoc cache EXP const-val)))
						const-val))))))

-----------------------------------------------


  (define-syntax foob
    (lambda (stx)
      (syntax-case stx ()
        ((_ x)
         (if (symbol? (syntax->datum #'x))
             #'(bar (syntax->datum #'x))
             #'(display "nope\n"))))))
-----------------------------------------------

(define (memoize FUNC)
"
  memoize a function FUNC which takes a single int as argument
"
	(define cache (make-hash-table))
   (define (int-hash INT SZ) (modulo INT SZ))
   (define (int-assoc INT ILIST)
      (find (lambda (pr) (equal? INT (car pr))) ILIST))

   (lambda (ITEM)
      (define val (hashx-ref int-hash int-assoc cache ITEM))
      (if val
			(begin (format #t "We did a cache lookup for ~A" ITEM) val)
         (let ((fv (FUNC ITEM)))
            (hashx-set! int-hash int-assoc cache ITEM fv)
            fv)))
)

(define (bar x)
	(format #t "Called bar with ~A\n" x)
	(+ x 1))

(define bar-memo (memoize bar))

(define-syntax foob
	(syntax-rules ()
		((foob EXP)

			(if (symbol? (quote EXP))
				(begin (display "its a symbol\n") (bar EXP))
				(begin
					(display "no its not\n") 
      			(if val val
         			(let ((fv (bar EXP)))
            				(hashx-set! int-hash int-assoc cache EXP fv)
            			fv))))))))

=================================================
(define-syntax incr
	(lambda (x)
		(syntax-case x ()
			((_) 




(define-syntax add1!
  (lambda (x)
    (syntax-case x ()
      ((_ var) (identifier? #'var)
       #'(set! var (+ 1 var))))))

(define-syntax add-or-die
  (lambda (x)
    (syntax-case x ()
      ((_ var) (identifier? #'var)
        #'(set! var (+ 1 var)))
		((_ exp) (not (identifier? #'exp))
		  #'(format #t "give it up for ~A\n" exp))
	)))



Did grid-protein 1 of 681 for TSPAN6 result-len=31 time=1.5403
Did grid-protein 2 of 681 for NDUFAF7 result-len=103 time=4.9989
Did grid-protein 3 of 681 for RBM5 result-len=432 time=24.632
Did grid-protein 4 of 681 for SLC7A2 result-len=475 time=4.7015
Did grid-protein 5 of 681 for NDUFAB1 result-len=561 time=4.1379
Did grid-protein 6 of 681 for DVL2 result-len=1540 time=45.046
Did grid-protein 7 of 681 for SKAP2 result-len=1594 time=4.7697
Did grid-protein 8 of 681 for DHX33 result-len=1696 time=14.745
Did grid-protein 9 of 681 for MSL3 result-len=1751 time=8.3342

Did grid-protein 75 of 681 for TMED2 result-len=28065 time=35.530
Did grid-protein 76 of 681 for HUWE1 result-len=37275 time=278.54
Did grid-protein 77 of 681 for NLK result-len=37455 time=16.030
Did grid-protein 78 of 681 for UIMC1 result-len=37809 time=32.225
Did grid-protein 79 of 681 for GNAS result-len=38296 time=40.636
Did grid-protein 80 of 681 for COQ9 result-len=39034 time=21.462
Did grid-protein 81 of 681 for NSFL1C result-len=39321 time=27.969
Did grid-protein 82 of 681 for TASP1 result-len=39328 time=4.5103
Did grid-protein 83 of 681 for MRPS33 result-len=39426 time=13.077
Did grid-protein 84 of 681 for NDUFB2 result-len=39472 time=5.1260
Did grid-protein 85 of 681 for TXNL1 result-len=39733 time=31.122
Did grid-protein 86 of 681 for MYL6 result-len=40392 time=60.824
Did grid-protein 87 of 681 for HDAC6 result-len=43564 time=161.19
Did grid-protein 88 of 681 for DHPS result-len=43694 time=11.170
Did grid-protein 89 of 681 for CREM result-len=43768 time=5.7811
Did grid-protein 90 of 681 for PSMD8 result-len=44680 time=48.937
Did grid-protein 91 of 681 for CIRBP result-len=45191 time=42.320
Did grid-protein 92 of 681 for HNRNPM result-len=51729 time=202.34
Did grid-protein 93 of 681 for SF3A1 result-len=54086 time=104.33
Did grid-protein 94 of 681 for POLR2F result-len=54668 time=13.487
Did grid-protein 95 of 681 for HMGXB4 result-len=54756 time=6.4987



Whoa!!!
Did grid-protein 76 of 681 for HUWE1 result-len=37275 time=164.80
Did grid-protein 79 of 681 for GNAS result-len=38296 time=16.145
Did grid-protein 87 of 681 for HDAC6 result-len=43564 time=77.229
Did grid-protein 88 of 681 for DHPS result-len=43694 time=2.0529
Did grid-protein 89 of 681 for CREM result-len=43768 time=0.7322
Did grid-protein 90 of 681 for PSMD8 result-len=44680 time=19.045
Did grid-protein 91 of 681 for CIRBP result-len=45191 time=13.813


find-pubmed-id

(run-query

(define-public pathway-gene-interactors
   (make-afunc-cache do-pathway-gene-interactors))


OK, 


todo- pathological file-write
todo- find-mol
toto the patch -- done

cache locate-node
cache find-name
maybe node-info

=================
penta: pathway-gene-interactors
 (PredicateNode "expresses")
(PredicateNode "interacts_with") 

tri:
 find-output-interactors
(PredicateNode "interacts_with") 


tri: find-protein-form  

(PredicateNode "expresses")

ChEBI2Reactome_PE_Pathway.txt.scm
NCBI2Reactome_PE_Pathway.txt.scm
UniProt2Reactome_PE_Pathway.txt.scm

(MemberLink 
 (MoleculeNode "ChEBI:10036")
(ConceptNode "R-HSA-2142753"))

(MemberLink
(GeneNode "AARS")
(ConceptNode "SMP0000055")

(MemberLink gene pathway)


(find-mol node "ChEBI")

[pw (find-pathway-member (GeneNode gene) "R-HSA")]


(Link
   (Link
      (Link
         (Link)   
         (Link
            (ConceptNode "F")
            (ConceptNode "C")
         )
         (Link
            (ConceptNode "B")
         )
      )
      (Link
         (Link
            (ConceptNode "D")
         )
         (Link
            (ConceptNode "C")
         )
      )
   )
)


(A  (B (C (D) F)))


     A
     |
     B
    / \
   C   F
   |
   D

(List (Concept "A")
      (List (Concept "B")
            (List (Concept "C")
                  (List (Concept "D"))
                  (Concept "F"))))


(use-modules (opencog))
(use-modules (srfi srfi-1))
(Inheritance    (Concept "A")    (Concept "B"))
(Inheritance    (Concept "B")    (Concept "C"))
(Inheritance    (Concept "B")    (Concept "F"))
(Inheritance    (Concept "C")    (Concept "D"))


; Traverse inheritance-link tree graph HEAD to depth DEPTH
(define (traverse HEAD DEPTH)
	; If we've traversed to the end, but there are more
	; branches below us, then say that.
	(if (eq? DEPTH 0) "unknown-branch"
		; Otherwise, build atree with HEAD at the top of
		; the tree.
		(cons HEAD 
			; Walk over the all links of the form (Inheritance A B)
			; and discard those where A is not HEAD. Keep only B.
			(filter-map
				(lambda (inh-lnk)
					; Discard those where A is not HEAD.
					(if (not (equal? HEAD (gar inh-lnk))) #f
						; Recurse to get subtrees under B.
						(traverse (gdr inh-lnk) (- DEPTH 1))))
				; A list of all InheritanceLinks which have HEAD in them.
				(cog-incoming-by-type HEAD 'InheritanceLink)))))

; Same as before, but generates valid atomese
(define (atraverse HEAD DEPTH)
	(if (eq? DEPTH 0) (Concept "unknown-branch")
		(List HEAD 
			(filter-map
				(lambda (inh-lnk)
					(if (not (equal? HEAD (gar inh-lnk))) #f
						(atraverse (gdr inh-lnk) (- DEPTH 1))))
				(cog-incoming-by-type HEAD 'InheritanceLink)))))



(define (pred-traverse HEAD DEPTH PRED)
	(if (eq? DEPTH 0) (Concept "unknown-branch")
	(if (not (PRED HEAD)) (Concept "cut by predicate")
		(List HEAD 
			(filter-map
				(lambda (inh-lnk)
					(if (not (equal? HEAD (gar inh-lnk))) #f
						(pred-traverse (gdr inh-lnk) (- DEPTH 1) PRED)))
				(cog-incoming-by-type HEAD 'InheritanceLink))))))


(Evaluation (Predicate "citizen") (List (Concept "A") (Concept "U.K")))
(Evaluation (Predicate "citizen") (List (Concept "B") (Concept "U.K")))
(Evaluation (Predicate "citizen") (List (Concept "F") (Concept "U.S")))

(define (is-uk? ATOM)
	(and
		(not (equal? '() (cog-link 'ListLink ATOM (Concept "U.K"))))
		(not (equal? '() (cog-link 'EvaluationLink (Predicate "citizen")
			 (List ATOM (Concept "U.K")))))))

(define (is-uk? ATOM)
	(and
		(cog-link 'ListLink ATOM (Concept "U.K"))
		(cog-link 'EvaluationLink (Predicate "citizen")
			 (List ATOM (Concept "U.K")))))

 (GetLink
    (TypedVariable (Variable "$a") (Type 'ConceptNode))  
    (Evaluation (Predicate "citizen")
                (List (Variable "$a") (Concept "U.K"))))

of 49050 genes, 18766 were in a triangle...


(use-modules (opencog matrix))

Triangle done 23000 of 49050 in 6.2343 secs 1818.420
Tri done 23000/49050 in 34. secs rate=12.0 gene/sec elapsed=1922.9

Finished triangle relations for 49050 genes in 4134.186 seconds

(sql-create "postgres:///gene_pairs")
(sql-open "postgres:///gene_pairs")
 
scheme@(guile-user)> (batch-gene-pairs)
Start computing the basis
Support: found num left= 19648 num right= 18074 in 19 secs
Finished left norm marginals in 25 secs
Finished left totals in 1 secs
Finished right norm marginals in 24 secs
Finished right totals in 1 secs
Done with wild-card count N(x,*) and N(*,y) in 51 secs
Total count N(*,*) = 5050388.0 = 5050388.0
Finished column (left) norm averages in 4 secs
Finished row (right) norm averages in 4 secs
Going to do individual pair frequencies
Done computing 540778 pair frequencies in 38 secs
Start computing log P(*,y)
Done computing 18074 left-wild log frequencies in 0 secs
Done with -log P(*,y), start -log P(x,*)
Done computing 19648 right-wild log frequencies in 1 secs

Done storing 18074 left-wilds in 11 secs
Done storing 19648 right-wilds in 13 secs
Done computing and saving -log P(x,*) and P(*,y)
Going to compute and store individual pair MI
Done 10000 of 19648 outer loops in 243 secs, pairs=325811 (1340.8 pairs/sec)
Done computing 529667 pair MI's in 391 secs
Going to do column and row subtotals
Finished left entropy subtotals in 30 secs
Finished right entropy subtotals in 30 secs
Finished left MI subtotals in 30 secs
Finished right MI subtotals in 29 secs
Going to compute the left, right and total entropy
Done computing totals; start saving wildcards
Done storing 18074 left-wilds in 17 secs
Done storing 19648 right-wilds in 19 secs
Finished with MI computations; this took 0.191 hours
Summary Report for Correlation Matrix Gene interacts_with Pairs
Left type: GeneNode    Right Type: GeneNode    Pair Type: EvaluationLink
Wildcard: (EvaluationLink (ctv 0 0 5050388)
   (PredicateNode "interacts_with")
   (ListLink
      (AnyNode "left-gene")
      (AnyNode "right-gene")
   )
)
Rows: 19648 Columns: 18074
Size: 455572 non-zero entries of 355117952 possible
Fraction non-zero: 1.2829E-3 Sparsity (-log_2): 9.6064
Total observations:  5050388.0  Avg obs per pair: 11.086
Entropy Total: 17.608   Left: +nan.0   Right: 11.045
Total MI: +nan.0

                 Left         Right     Avg-left     Avg-right
                 ----         -----     --------     ---------
Support (l_0)  440.1        262.5    
Count   (l_1)  1.0973E+4    6694.         24.93        25.51    
Length  (l_2)  803.0        628.0         1.825        2.393    
RMS Count      +nan.0       +nan.0        +nan.0       +nan.0   

No MM^T data present
No M^TM data present
$45 = #t
scheme@(guile-user)> 


argh...

ntropy Tota
(rpt-obj 'left-entropy) (add-report-api 
(cog-value-ref (cog-value wild-atom ent-key) 0)
"*-Total Entropy Key-*"
set-entropy

cache-entropy

compute-left-entropy

(define gpe (add-report-api gps))
(define rpn (add-total-entropy-compute gps))
(gpp 'total-mi)

add-subtotal-mi-compute

(rpn 'cache-all-subtotals)

(define star-obj gps)
(define frqobj (add-pair-freq-api gps))

      (define (left-sum FN)
         (fold
            (lambda (right-item sum) (+ sum (FN right-item)))
            0 (star-obj 'right-basis)))

      (define (compute-left-entropy)
         (left-sum
            (lambda (x) 
(define prod (*
                  (frqobj 'left-wild-freq x)
                  (frqobj 'left-wild-logli x)))
(if (nan? prod) (format #t "oh no ~A\n" x))
prod
)))

      (define (compute-total-mi)
         (define lsum (left-sum
               (lambda (x) 
(define wmi (frqobj 'left-wild-mi x))
(if (nan? wmi) (format #t "oh non ~A" x))
wmi
)))
         (define rsum (right-sum
               (lambda (x) (frqobj 'right-wild-mi x))))
         (if (< 1.0e-8 (/ (abs (- lsum rsum)) lsum))
            (throw 'bad-summation 'compute-total-mi
               (format #f
                  "Left and right MI sums fail to be equal: ~A ~A\n"
                  lsum rsum)))
         lsum)


cache-left-mi

compute-left-mi
frqobj 'pair-mi PAIR

(frqobj 'left-wild-mi (GeneNode "CD2AP"))
(compute-left-mi (GeneNode "CD2AP"))

(define (compute-left-mi RIGHT-ITEM)
         (fold
            (lambda (PAIR sum)
					(define pmi (frqobj 'pair-mi PAIR))
					(if (finite? pmi) (+ sum pmi) sum))
            0
            (star-obj 'left-stars RIGHT-ITEM)))


set-left-norms

(define sgc (add-support-compute gps))
(sgc 'cache-all)
(define sga (add-support-api gps))

((make-central-compute  gps) 'cache-all)

      (define (get-left-rms-count)
         (real-part
         (get-col-fn-avg
            (lambda (x)
               (define sup (len-obj 'left-support x))
               (define siz (len-obj 'left-count x))
               (define len (len-obj 'left-length x))
               (define lensq (* len len))
               (define sizsq (/ (* siz siz) sup))
              (define fu (sqrt (- lensq sizsq)))
; (if (nan? fu) (format #t "aiii ~A ~A ~A" sizsq fu x))
(if (finite? sizsq) fu 0.0)
))))


      (define (get-col-fn-avg FN)
         (define weighted-avg (fold
            (lambda (item sum)
               (+ sum (* 
                     (FN item)
                     (len-obj 'left-count item))))
            0.0
            (wild-obj 'right-basis)))
         (define total (len-obj 'wild-wild-count))
         (/ weighted-avg total))





store-atom

 (store-obj 'store-wildcards)

(add-pair-freq-api #:nothrow #t)


batch-mi-obj (make-batch-mi

subtotal-obj (add-subtotal-mi-compute  entropy.scm

(define evs (cog-incoming-by-type
	(PredicateNode "interacts_with") 'EvaluationLink))

(define hit 0)
(for-each (lambda (ev)
	(if (not (cog-ctv? (cog-tv ev)))
		(cog-set-tv! ev (cog-new-ctv 1 0 0))
		(set! hit (+ hit 1))))
	evs)

455573 hat tvs, out of 676602

but:
Done computing 540778 pair frequencies in 39 secs
(length (gps 'get-all-elts)) is 540778 so wtf ...

(cog-incoming-set (AnyNode "right-gene"))

(define (get-left-wildcards LLOBJ)
	(map
		(lambda (right-item)
			(LLOBJ 'left-wildcard right-item))
		(LLOBJ 'right-basis)))

(define (get-right-wildcards LLOBJ)
	(map
		(lambda (left-item)
			(LLOBJ 'right-wildcard left-item))
		(LLOBJ 'left-basis)))

(define any-left (get-left-wildcards gps))  ; 18074
(define any-right (get-right-wildcards gps)) ;19648

(define 
crap...
(VariableNode "$a")


(add-pair-freq-api

 (let ((pair-cnt (freq-obj 'cache-all-pair-freqs)))


scheme@(guile-user)> (print-matrix-summary-report gps)
Summary Report for Correlation Matrix Gene interacts_with Pairs
Left type: GeneNode    Right Type: GeneNode    Pair Type: EvaluationLink
Wildcard: (EvaluationLink (ctv 0 0 5050388)
   (PredicateNode "interacts_with")
   (ListLink
      (AnyNode "left-gene")
      (AnyNode "right-gene")
   )
)
Rows: 19648 Columns: 18074
Size: 455572 non-zero entries of 355117952 possible
Fraction non-zero: 1.2829E-3 Sparsity (-log_2): 9.6064
Total observations:  5050388.0  Avg obs per pair: 11.086
Entropy Total: 17.608   Left: 10.621   Right: 11.045
Total MI: 4.0584

                 Left         Right     Avg-left     Avg-right
                 ----         -----     --------     ---------
Support (l_0)  440.1        262.5    
Count   (l_1)  1.0973E+4    6694.         24.93        25.51    
Length  (l_2)  803.0        628.0         1.825        2.393    
RMS Count      685.5        517.2         1.558        1.971    

No MM^T data present
No M^TM data present
$157 = #t
scheme@(guile-user)> 


(define lst
(cog-incoming-by-type (Gene "RNF123") 'ListLink)

(filter (lambda (pr)
	(equal? "left-gene" (cog-name (gar pr))))
	lst)

==========================================================
Paths

Protein expression for 68714 pathways in 59670. seconds
(length path-genes) ;9895   .. seems short? 

Arghhh effing G and SMP ConceptNodes...

scheme@(guile-user)> (cog-report-counts)
$12 = ((ConceptNode . 454779) (PredicateNode . 12) (ListLink . 2575276) (MemberLink . 2037006) (AndLink . 167502) (VariableNode . 5) (VariableList . 1) (GetLink . 117764) (EvaluationLink . 1887533) (TypeNode . 3) (TypedVariableLink . 5) (InheritanceLink . 122184) (GeneNode . 49050) (MoleculeNode . 368909))

delete the GO: nodes:

$14 = ((ConceptNode . 410047) (PredicateNode . 12) (ListLink . 2485821) (MemberLink . 1618670) (AndLink . 149289) (VariableNode . 5) (VariableList . 1) (GetLink . 99551) (EvaluationLink . 1798075) (TypeNode . 3) (TypedVariableLink . 5) (InheritanceLink . 2322) (GeneNode . 49050) (MoleculeNode . 368909))
scheme@(guile-user)> 

=====================
fresh load
scheme@(guile-user)> (cog-report-counts)
$3 = ((ConceptNode . 454779) (PredicateNode . 12) (ListLink . 1925554) (MemberLink . 1850528) (AndLink . 98788) (EvaluationLink . 1887530) (InheritanceLink . 122184) (GeneNode . 49050) (MoleculeNode . 368909))

delete-go-nodes

scheme@(guile-user)> (cog-report-counts)
$4 = ((ConceptNode . 410047) (PredicateNode . 12) (ListLink . 1836099) (MemberLink . 1468618) (AndLink . 98788) (EvaluationLink . 1798072) (InheritanceLink . 2322) (GeneNode . 49050) (MoleculeNode . 368909))

self-interactors -- all GeneNodes, 2945 of them.

scheme@(guile-user)> (cog-report-counts)
$5 = ((ConceptNode . 410047) (PredicateNode . 12) (ListLink . 1830216) (MemberLink . 1468618) (AndLink . 98788) (VariableNode . 1) (GetLink . 1) (EvaluationLink . 1792188) (InheritanceLink . 2322) (GeneNode . 49050) (MoleculeNode . 368909))


non-sym evals:
537839

after symmetrization:
((ConceptNode . 410047) (PredicateNode . 12) (ListLink . 2023866) (MemberLink . 1468618) (AndLink . 98788) (PresentLink . 1) (VariableNode . 3) (VariableList . 1) (GetLink . 1) (BindLink . 2) (EvaluationLink . 1985841) (TypeNode . 1) (TypedVariableLink . 2) (InheritanceLink . 2322) (GeneNode . 49050) (MoleculeNode . 368909))




(define rotate
   (Bind
      (VariableList
         (TypedVariable (Variable "$a") (Type 'GeneNode))
         (TypedVariable (Variable "$b") (Type 'GeneNode))
         (TypedVariable (Variable "$c") (Type 'GeneNode))
      )
	(And
      (Present (Evaluation (Predicate "pointed_triangle")
         (List (Variable "$a") (Variable "$b") (Variable "$c"))))
      (Absent (Evaluation (Predicate "pointed_triangle")
         (List (Variable "$b") (Variable "$c") (Variable "$a"))))
	)
	(Evaluation (Predicate "foobar")
		(List (Variable "$a") (Variable "$b") (Variable "$c")))
      )) 

(define (make-rotated-triangles)
   (define elapsed-secs (make-timer))
   (define pset (cog-execute! rotate))
   (define points (cog-outgoing-set pset))
   (define npoints (length points))
   (cog-delete pset)
   (format #t "Obtained ~A pointed triangles in ~6f seconds\n"
      npoints (elapsed-secs))
	; points
)

(define rotate
   (Bind
      (VariableList
         (TypedVariable (Variable "$a") (Type 'GeneNode))
         (TypedVariable (Variable "$b") (Type 'GeneNode))
      )
      (Evaluation (Predicate "pointed_triangle")
         ; (List (Variable "$a") (Variable "$b") (Variable "$b"))
         ; (List (Variable "$b") (Variable "$a") (Variable "$b"))
         (List (Variable "$b") (Variable "$b") (Variable "$a"))
		)
		(Evaluation (Predicate "degenerate")
			(List (Variable "$a") (Variable "$b")))
      )) 

(define rotate
   (Bind
      (VariableList
         (TypedVariable (Variable "$a") (Type 'GeneNode))
      )
      (Evaluation (Predicate "pointed_triangle")
         (List (Variable "$a") (Variable "$a") (Variable "$a"))
		)
		(Evaluation (Predicate "point")
			(List (Variable "$a")))
      )) 


(define rotate
   (Bind
      (VariableList
         (TypedVariable (Variable "$a") (Type 'GeneNode))
      )
		(Evaluation (Predicate "degenerate")
			(List (Variable "$a") (Variable "$a")))
		(Evaluation (Predicate "point")
			(List (Variable "$a")))
      )) 


3452807

942608  in the SetLink

whoa: 145572 degenerates!!

Symmetric set:

scheme@(guile-user)> (batch-gene-pairs)
Start computing the basis
Support: found num left= 20123 num right= 20123 in 18 secs
Finished left norm marginals in 79 secs
Finished left totals in 1 secs
Finished right norm marginals in 81 secs
Finished right totals in 0 secs
Done with wild-card count N(x,*) and N(*,y) in 161 secs
Total count N(*,*) = 10783686.0 = 10783686.0
Finished column (left) norm averages in 3 secs
Finished row (right) norm averages in 4 secs
Going to do individual pair frequencies
Done computing 731490 pair frequencies in 89 secs
Start computing log P(*,y)
Done computing 20123 left-wild log frequencies in 1 secs
Done with -log P(*,y), start -log P(x,*)
Done computing 20123 right-wild log frequencies in 0 secs
Done storing 20123 left-wilds in 30 secs
Done storing 20123 right-wilds in 22 secs
Done computing and saving -log P(x,*) and P(*,y)
Going to compute and store individual pair MI
Done 10000 of 20123 outer loops in 636 secs, pairs=503507 (791.68 pairs/sec)
Done computing 704086 pair MI's in 894 secs
Going to do column and row subtotals
Finished left entropy subtotals in 80 secs
Finished right entropy subtotals in 84 secs
Finished left MI subtotals in 82 secs
Finished right MI subtotals in 80 secs
Going to compute the left, right and total entropy
Done computing totals; start saving wildcards
Done storing 20123 left-wilds in 17 secs
Done storing 20123 right-wilds in 16 secs
Finished with MI computations; this took 0.438 hours
Summary Report for Correlation Matrix Gene interacts_with Pairs
Left type: GeneNode    Right Type: GeneNode    Pair Type: EvaluationLink
Wildcard: (EvaluationLink (ctv 0 0 10783686)
   (PredicateNode "interacts_with")
   (ListLink
      (AnyNode "left-gene")
      (AnyNode "right-gene")
   )
)
Rows: 20123 Columns: 20123
Size: 617530 non-zero entries of 404935129 possible
Fraction non-zero: 1.5250E-3 Sparsity (-log_2): 9.3570
Total observations: 10783686.0  Avg obs per pair: 17.463
Entropy Total: 18.214   Left: 10.852   Right: 10.852
Total MI: 3.4905

                 Left         Right     Avg-left     Avg-right
                 ----         -----     --------     ---------
Support (l_0)  400.5        400.5    
Count   (l_1)  1.5231E+4    1.5231E+4     38.03        38.03    
Length  (l_2)  905.5        905.5         2.261        2.261    
RMS Count      634.3        634.3         1.584        1.584 

WTF:
Done computing 731490 pair frequencies in 89 secs
Done computing 704086 pair MI's in 894 secs
Size: 617530 non-zero entries of 404935129 possible

why aren't these identical? Oh, because ... 
first two differ because they're counting non-zero rows intersect non-zero
columns. i.e. upper-bound on non-zero pairs.

why do the second two differ? Because 
second two differ because not all pairs were in triangles.


Hmm,

(define gpa (make-gene-pair-api))
(define gps (add-pair-stars gpa))

(length (gps 'get-all-elts)) ; 731490  -- OK
(define pos-elts (filter (lambda (x) (< 0 (gpa 'get-count x))) all-elts))
(length pos-elts) ; 617530 

(fold (lambda (row sum)
	(+ sum (length (gps 'right-stars row))))
0 (gps 'left-basis))   ; 731490 OK

(fold (lambda (row sum)
	(+ sum (length (gps 'right-duals row))))
0 (gps 'left-basis))    ; 731490 OK


(define gpr (add-report-api gps))
(define (do-one-pair col)
	(< 0 (gpr 'left-count col)) 

(fold (lambda (row sum)
	(+ sum (length (filter (lambda (col) (< 0 (gpr 'left-count col)))
		(gps 'right-stars row)))))
0 (gps 'left-basis))    ;  731490

(fold (lambda (row sum)
	(+ sum (length (filter (lambda (col) (< 0 (gpr 'left-count col)))
		(gps 'right-stars row)))))
0 
	(filter (lambda (row) (< 0 (gpr 'right-count row))) (gps 'left-basis)))  ; 731490

(define cnt 0)
(define (right-loop left-item)
	(define (do-one-pair right-item)
		(if (< 0 (gpr 'left-count right-item)) (set! cnt (+ 1 cnt))))
	
	(if (< 0 (gpr 'right-count left-item))
		(for-each do-one-pair (gps 'right-duals left-item)))
)
(for-each right-loop (gps 'left-basis))  
cnt ; 731490  OK so where 



num-prs batch-mi-obj 'cache-pair-mi
(make-batch-mi gps)




(gps 'left-basis-size) ;  20123
(gpr 'left-support)  ; 400.4529875962635
(gpr 'left-count)   ; 15230.809315849887


I don't get it. If there are 617530 non-zero entries, and 20123 rows, then
there's an average of (/ 617530 20123.) = 30.687770213188887 non-zero entries
per row, so what is l_0 then? .. its the weighted averge. Ah hah.

from set-left-norms

(define gcc (make-central-compute gps))
(gcc 'left-support)
do-get-col-avg 'left-support
which is average over columns, of the support in that column, weiighted by column
itself.  Ohhhh OK. That explains it.


(define (make-batch-fu LLOBJ)

   (let ((llobj LLOBJ)
         (star-obj (add-pair-stars LLOBJ))
         (supobj (add-support-api LLOBJ))
         (frqobj (add-pair-freq-api LLOBJ #:nothrow #t)))

      (define (compute-fu)
         (define lefties (star-obj 'left-basis))
         (define nlefties (length lefties))

         ; progress stats
         (define cnt-pairs (make-atomic-box 0))
         (define cnt-lefties (make-atomic-box 0))

         (define (atomic-inc ctr)
            (define old (atomic-box-ref ctr))
            (define new (+ 1 old))
            (define swp (atomic-box-compare-and-swap! ctr old new))
            (if (= old swp) new (atomic-inc ctr)))

         (define start-time (current-time))
         (define (elapsed-secs)
            (define diff (- (current-time) start-time))
            (set! start-time (current-time))
            diff)

         (define cnt-start 0)
         (define (elapsed-count cnt)
            (define diff (- (atomic-box-ref cnt-pairs) cnt-start))
            (set! cnt-start cnt)
            diff)

         (define (right-loop left-item)
            (if (< 0 (supobj 'right-count left-item))
               (let ()
                  (define (do-one-pair right-item)
                     (if (< 0 (supobj 'left-count right-item))
                           (atomic-inc cnt-pairs)))
                  (for-each
                     do-one-pair
                     (star-obj 'right-duals left-item))

                  ; Print some progress statistics.
                  (if (eqv? 0 (modulo (atomic-inc cnt-lefties) 10000))
                     (let ((secs (elapsed-secs)))
                        (format #t
                           "Done ~A of ~A outer loops in ~A secs, pairs=~A (~6f pairs/sec)\n"
                           (atomic-box-ref cnt-lefties)
                           nlefties secs
                           (atomic-box-ref cnt-pairs)
                           (/ (elapsed-count (atomic-box-ref cnt-pairs)) secs))))
               ))
         )
         (for-each right-loop lefties)

         ; Return a count of the number of pairs.
         (atomic-box-ref cnt-pairs)
      )
      ; Methods on this class.
      (lambda (message . args)
         (case message
            ((pute-fu)        (compute-fu))
            (else (apply llobj      (cons message args))))
      ))
)
(define gpf (make-batch-fu gps))
(gpf 'pute-fu)

gives ... 704086 .. why? That seems wrong?
Ah hah. Its not the entry that's non-zero, its the column/row

(define (make-batch-fu LLOBJ)

   (let ((llobj LLOBJ)
         (star-obj (add-pair-stars LLOBJ))
         (supobj (add-support-api LLOBJ)))

      (define (compute-fu)
         (define lefties (star-obj 'left-basis))

         ; progress stats
         (define cnt-pairs (make-atomic-box 0))

         (define (atomic-inc ctr)
            (define old (atomic-box-ref ctr))
            (define new (+ 1 old))
            (define swp (atomic-box-compare-and-swap! ctr old new))
            (if (= old swp) new (atomic-inc ctr)))

         (define (right-loop left-item)
            (if (< 0 (supobj 'right-count left-item))
               (let ()
                  (define (do-one-pair right-item)
                     (if (< 0 (supobj 'left-count right-item))
                           (atomic-inc cnt-pairs)))
                  (for-each
                     do-one-pair
                     (star-obj 'right-duals left-item))
               ))
         )
         (for-each right-loop lefties)

         ; Return a count of the number of pairs.
         (atomic-box-ref cnt-pairs)
      )
      ; Methods on this class.
      (lambda (message . args)
         (case message
            ((pute-fu)        (compute-fu))
            (else (apply llobj      (cons message args))))
      ))
)
(define gpf (make-batch-fu gps))
(gpf 'pute-fu) ; 704086

      (define (compute-fu LLOBJ)

         (define supobj (add-support-api LLOBJ))
         (define cnt-pairs 0)
         (define (atomic-inc)
				(set! cnt-pairs (+ 1 cnt-pairs)))

         (define (right-loop left-item)
            (if (< 0 (supobj 'right-count left-item))
               (let ()
                  (define (do-one-pair right-item)
                     (if (< 0 (supobj 'left-count right-item))
                           (atomic-inc)))
                  (for-each
                     do-one-pair
                     (LLOBJ 'right-duals left-item))
               ))
         )
         (for-each right-loop (LLOBJ 'left-basis))
         cnt-pairs
      )

(compute-fu gps) ; 704086

      (define (compute-fu LLOBJ)

         (define supobj (add-support-api LLOBJ))
         (define cnt-pairs 0)

         (define (right-loop left-item)
            (if (< 0 (supobj 'right-count left-item))
               (let ()
                  (define (do-one-pair right-item)
                     (if (< 0 (supobj 'left-count right-item))
                           (set! cnt-pairs (+ 1 cnt-pairs))))
                  (for-each do-one-pair (LLOBJ 'right-duals left-item))))
         )
         (for-each right-loop (LLOBJ 'left-basis))
         cnt-pairs
      )
(compute-fu gps) ; 704086

      (define (compute-fu LLOBJ)
         (define supobj (add-support-api LLOBJ))
         (define cnt-pairs 0)
         (define (do-one-pair right-item)
            (if (< 0 (supobj 'left-count right-item)) (set! cnt-pairs (+ 1 cnt-pairs))))

         (define (right-loop left-item)
            (if (< 0 (supobj 'right-count left-item))
                  (for-each do-one-pair (LLOBJ 'right-duals left-item)))
         )
         (for-each right-loop (LLOBJ 'left-basis))
         cnt-pairs
      )


(define gpr (add-report-api gps))
(define cnt 0)
(define (right-loop left-item)
	(define (do-one-pair right-item)
		(if (< 0 (gpr 'left-count right-item)) (set! cnt (+ 1 cnt))))
	
	(if (< 0 (gpr 'right-count left-item))
		(for-each do-one-pair (gps 'right-duals left-item)))
)
(for-each right-loop (gps 'left-basis))  


(define gpu (add-support-api gps))
      (define (compute-fu)
         (define cnp 0)
         (define (do-one-pair right-item)
				(define cpu (< 0 (gpu 'left-count right-item)))
				(define rpu (< 0 (gpr 'left-count right-item)))
				(if (not (equal? cpu rpu))
					(format #t "Oh noooo sup=~A rep=~A for right=~A\n"
							(gpu 'left-count right-item)
							(gpr 'left-count right-item)
							right-item))
            (if cpu (set! cnp (+ 1 cnp))))

         (define (right-loop left-item)
            (define cpu (< 0 (gpu 'right-count left-item)))
            (define rpu (< 0 (gpr 'right-count left-item)))
				(if (not (equal? cpu rpu))
					(format #t "Oh noooo sup=~A rep=~A for left=~A\n"
                     (gpu 'right-count left-item)
                     (gpr 'right-count left-item)
							left-item))
            (if cpu (for-each do-one-pair (gps 'right-duals left-item)))
         )
         (for-each right-loop (gps 'left-basis))
         cnp)

report: right-count = sum_x P(x,*) N(x,*)

support:
(get-count (LLOBJ 'right-wildcard ITEM)))

(define gene (GeneNode "MORF4L1P2"))

   (define (get-count ATOM)
		(define norm-key (PredicateNode "*-Norm Key-*"))
         (cog-value-ref (cog-value ATOM norm-key) 1))

(define marg (gps 'right-wildcard gene))
(cog-value marg norm-key)

... all zeros... why? Oh OK
who called set-norms ?
add-support-compute ... called set-left-marginals all-left-marginals

(define gsc (add-support-compute gps))
(gsc 'left-support gene)

(length (gps 'left-stars gene)) ; 1
... which has a count of zero ... OK, its not in a triangle...

but report is different...
(gpr 'left-count gene)


gahhh 

(define (make-batch-fu LLOBJ)

   (let ()
		(define (foo)  1)
		(define (bar argy) 2)

      ; Methods on this class.
      (lambda (message . args)

         (define (oops)
            (throw 'wrong-number-of-args 'add-report-api
               (format #f "The ~A method does not expect any arguments!" message)))

         (if (< 0 (length args))
            (case message
               ((pute-fu)            (oops))
				))

         (case message
            ((pute-fu)        (foo))
            ((say-fu)        (apply foo args))
            (else (apply LLOBJ      (cons message args))))
      )))


            (throw 'no-transpose-data 'mtm-mi
               "No transpose data available for this dataset! Did you forget to (batch-transpose)? ")))


=============================================================================
(define gea (make-expression-pair-api))
(define ges (add-pair-stars gea))
(ges 'help)
(ges 'left-type) ; GeneNode
(ges 'right-type) ; MoleculeNode
(ges 'left-basis-size) ; 27117
(ges 'right-basis-size) ; 147848
(define ap (ges 'get-all-elts))
 (length ap)  ; 148734

(define fp (filter (lambda (ev) (cog-ctv? (cog-tv ev))) ap))
(length fp) ; 6794

Arghhh  (delete-simple-tv)

(define gez (add-zero-filter ges #f))
(gez 'left-basis-size) ; 6694
(gez 'right-basis-size) ; 6735


	(lambda (gene)
		(fold (lambda (PR cnt)
			(if (< 0 (cog-count PR)) (+ 1 cnt) cnt)) 0
			(gez 'right-stars gene)))
	(gez 'left-basis)

make-evaluation-pair-api in eval-pairs.scm wtf oh dead code.

 (Member (MoleculeNode "protein") (Concept "SMP0027226"))

(define counted-paths
	(filter (lambda (path) (cog-ctv? (cog-tv path))) pathways))

(define am (cog-get-atoms 'MemberLink))
(length am) ;1517668

(define (do-get-all-pairs)
         (filter!
            (lambda (pair)
               (and
                  (equal? 'MoleculeNode (cog-type (gar pair)))
                  (equal? 'ConceptNode (cog-type (gdr pair)))))
            (cog-get-atoms 'MemberLink)))

(define ap (do-get-all-pairs))
(length ap) ;1127455

(define np
         (filter!
            (lambda (pair)
               (and
                  (equal? 'MoleculeNode (cog-type (gar pair)))
                  (equal? 'ConceptNode (cog-type (gdr pair)))
						(or
							(string-prefix? "SMP" (cog-name (gdr pair)))
							(string-prefix? "R-HSA-" (cog-name (gdr pair)))
						)
					))
            (cog-get-atoms 'MemberLink)))


(define smp
(filter
	(lambda (path)
		(define na (cog-name path))
		(and (string-prefix? "NR_" na)
			(string-skip (substring na 3) char-set:digit))
	)
	(cog-get-atoms 'MoleculeNode)))

(define prot
(filter
	(lambda (path)
		(define na (cog-name path))
		(and
			(not (string-prefix? "ChEBI:" na))
			(not (string-prefix? "ENST" na))
			(not (string-prefix? "NM_" na))
			(not (string-prefix? "NP_" na))
			(not (string-prefix? "NR_" na))
			(not (string-prefix? "YP_" na))
			(not (string-prefix? "Uniprot" na))
		)
	)
	(cog-get-atoms 'MoleculeNode)))


(define ppa (make-pathway-pair-api))
(length (ppa 'all-pairs)) ; 1127455
; 1082860 after deleting bad chebi
(define pps (add-pair-stars ppa))
(pps 'left-basis-size) ; 14053
(pps 'right-basis-size) ; 50566

(batch-all-pair-mi pps #f)

(fold (lambda (path cnt) (+ cnt (if (< 0 (cog-count path)) 1 0))) 0
   (pps 'left-basis))


python-minimal cython libpython2.7 

expresses 148736

gene-pathway-annotation aka gene-path-anno <- parser entry point
  -- reactome
     -- find-pathway-member small
     -- find-pathway-genes big
        -- patterns
        -- add-pathway-genes majority of cpu <=== trouble area.
     -- find-mol small-ish


biogrid-interaction-annotation
  -- find-output-interactors
     -- big pattern small
     -- generate-result big
        -- find-go-term small
        -- find-protein-form big -- but its a pattern


find-protein-form use Get not Bind

cache -- find-output-interactors  no not worth it

why is find-pathway-member called 2x ?? doesn't matter its fast

add-pathway-genes
  -- locate-node fast
  -- node-info is memoized...

add-pathway-genes is now 5.5x faster and gene-path-anno is 2.5x faster

while doing the 313'th gene

crashes in the same place



gene-path-anno is in 
Time: 64.725457 secs. calls: 414 avg: 156341.7 usec/call for smpdb
Time: 253.15135 secs. calls: 414 avg: 611476.7 usec/call for reactome

Time: 244.60606 secs. calls: 2442 avg: 100166.3 usec/call for find-pathway-genes
Time: 142.88328 secs. calls: 127562 avg:   1120.1 usec/call for add-pathway-genes
Time: 2.4922931 secs. calls: 829 avg:   3006.4 usec/call for find-pathway-m

Time: 0.2853182 secs. calls: 1472 avg:    193.8 usec/call for pathway-hierarchy
Time: 3.8986631 secs. calls: 828 avg:   4708.5 usec/call for find-protein
Time: 113.08048 secs. calls: 2442 avg:  46306.5 usec/call for find-mol
Time: 0.4114375 secs. calls: 1504 avg:    273.6 usec/call for find-name
Time: 6.1269069 secs. calls: 7746 avg:    791.0 usec/call for find-parent
Time: 17.858872 secs. calls: 9054 avg:   1972.5 usec/call for locate-node
Time: 39.305706 secs. calls: 104241 avg:    377.1 usec/call for add-loc


gene-go is
NOT find-pathway-genes
NOT add-pathway-genes
find-pathway-member
pathway-hierarchy
find-protein

find-mol is dual role

Pathway functions
Time: 543.19234 secs. calls: 1 avg: 543192336.0 usec/call for gene-path-anno
Zero calls to gene-path-write
Time: 176.94091 secs. calls: 681 avg: 259825.1 usec/call for smpdb
Time: 358.87071 secs. calls: 681 avg: 526976.1 usec/call for reactome
Time: 355.52200 secs. calls: 3769 avg:  94327.9 usec/call for find-pathway-genes
Time: 185.38953 secs. calls: 183670 avg:   1009.4 usec/call for add-pathway-genes
Time: 4.8529986 secs. calls: 1362 avg:   3563.1 usec/call for find-pathway-member
Zero calls to pathway-gene-interactors
Zero calls to generate-interactors
Time: 0.6302879 secs. calls: 2197 avg:    286.9 usec/call for pathway-hierarchy
Time: 5.6913277 secs. calls: 1362 avg:   4178.7 usec/call for find-protein

GO functions
Time: 114.41950 secs. calls: 1 avg: 114419502.5 usec/call for gene-go-anno
Time: 0.6046124 secs. calls: 1 avg: 604612.4 usec/call for gene-go-write
Time: 68.771602 secs. calls: 1471 avg:  46751.6 usec/call for find-go-term
Time: 27.870665 secs. calls: 11047 avg:   2522.9 usec/call for add-go-info


Common functions
Time: 174.59736 secs. calls: 3769 avg:  46324.6 usec/call for find-mol
Time: 0.3685744 secs. calls: 1541 avg:    239.2 usec/call for find-name
Time: 18.281771 secs. calls: 9914 avg:   1844.0 usec/call for locate-node
Time: 59.014367 secs. calls: 153412 avg:    384.7 usec/call for add-loc
Time: 5.9703277 secs. calls: 8586 avg:    695.4 usec/call for find-parent


Not GO
find-mol find-name locate-node add-loc find-parent

Not biogrid find-mol add-loc

biogrid-rare: find-name find-parent

Time: 22.129893 secs. calls: 691 avg:  32025.9 usec/call for find-memberln
Time: 0.4389117 secs. calls: 324 avg:   1354.7 usec/call for find-protein-form


Pathway functions
Time: 521.29256 secs. calls: 1 avg: 521292555.8 usec/call for gene-path-anno
Time: 115.86134 secs. calls: 1 avg: 115861342.7 usec/call for gene-path-write
Time: 172.32179 secs. calls: 681 avg: 253042.3 usec/call for smpdb
Time: 342.50595 secs. calls: 681 avg: 502945.6 usec/call for reactome
Time: 345.16271 secs. calls: 3769 avg:  91579.4 usec/call for find-pathway-genes
Time: 181.36376 secs. calls: 183670 avg:    987.4 usec/call for add-pathway-genes
Time: 164.07672 secs. calls: 3769 avg:  43533.2 usec/call for find-mol
Time: 4.8064842 secs. calls: 1362 avg:   3529.0 usec/call for find-pathway-member
Time: 0.6353414 secs. calls: 2197 avg:    289.2 usec/call for pathway-hierarchy
Time: 5.6786770 secs. calls: 1362 avg:   4169.4 usec/call for find-protein
Time: 54.434262 secs. calls: 153412 avg:    354.8 usec/call for add-loc
Zero calls to pathway-gene-interactors
Zero calls to generate-interactors

Common biogrid/pathway functions
Time: 2.0903343 secs. calls: 1549 avg:   1349.5 usec/call for find-name
Time: 23.860827 secs. calls: 18187 avg:   1312.0 usec/call for locate-node
Time: 6.2035060 secs. calls: 8853 avg:    700.7 usec/call for find-parent

Biogrid functions
Time: 544.60710 secs. calls: 1 avg: 544607103.2 usec/call for biogrid-anno
Time: 16.548887 secs. calls: 1 avg: 16548887.1 usec/call for biogrid-write
Time: 55.154352 secs. calls: 681 avg:  80990.2 usec/call for match-gene-interactors
Time: 488.67459 secs. calls: 681 avg: 717583.8 usec/call for find-output-interactors
Time: 282.23120 secs. calls: 540000 avg:    522.7 usec/call for generate-result
Time: 52.450733 secs. calls: 1080000 avg:     48.6 usec/call for build-interaction
Time: 171.74925 secs. calls: 145877 avg:   1177.4 usec/call for find-pubmed-id
Zero calls to find-rna

Common biogrid/GO functions
Time: 105.45336 secs. calls: 10899 avg:   9675.5 usec/call for find-memberln
Time: 9.5412558 secs. calls: 9464 avg:   1008.2 usec/call for find-protein-form

GO functions
Time: 105.78463 secs. calls: 1 avg: 105784630.0 usec/call for gene-go-anno
Time: 0.6229931 secs. calls: 1 avg: 622993.1 usec/call for gene-go-write
Time: 65.820128 secs. calls: 10218 avg:   6441.6 usec/call for find-go-term
Time: 22.861835 secs. calls: 11047 avg:   2069.5 usec/call for add-go-info
#t
debug> 


ice-9/boot-9.scm:1655:16: In procedure raise-exception:
In procedure cog-handle: Wrong type argument in position 1 (expecting opencog atom): #<Invalid handle>


wtf cog-atom? did not catch it!!


old find-mol:
Pathway functions
Time: 605.30362 secs. calls: 1 avg: 605303617.1 usec/call for gene-path-anno
Time: 119.20130 secs. calls: 1 avg: 119201303.5 usec/call for gene-path-write
Time: 197.02142 secs. calls: 681 avg: 289311.9 usec/call for smpdb
Time: 400.38248 secs. calls: 681 avg: 587933.2 usec/call for reactome
Time: 404.90735 secs. calls: 3769 avg: 107431.0 usec/call for find-pathway-genes
Time: 218.49366 secs. calls: 183670 avg:   1189.6 usec/call for add-pathway-genes
Time: 185.57233 secs. calls: 3769 avg:  49236.5 usec/call for find-mol
Time: 5.9458170 secs. calls: 1362 avg:   4365.5 usec/call for find-pathway-member
Time: 0.5951698 secs. calls: 2197 avg:    270.9 usec/call for pathway-hierarchy
Time: 6.7300200 secs. calls: 1362 avg:   4941.3 usec/call for find-protein
Time: 63.506159 secs. calls: 153412 avg:    414.0 usec/call for add-loc
Zero calls to pathway-gene-interactors
Zero calls to generate-interactors

Common biogrid/pathway functions
Time: 2.3070624 secs. calls: 1549 avg:   1489.4 usec/call for find-name
Time: 27.333982 secs. calls: 18187 avg:   1502.9 usec/call for locate-node
Zero calls to find-parent

Biogrid functions
Time: 597.79982 secs. calls: 1 avg: 597799822.2 usec/call for biogrid-anno
Time: 15.980891 secs. calls: 1 avg: 15980891.4 usec/call for biogrid-write
Time: 55.152007 secs. calls: 681 avg:  80986.8 usec/call for match-gene-interactors
Time: 541.87850 secs. calls: 681 avg: 795710.0 usec/call for find-output-interactors
Time: 309.95492 secs. calls: 540000 avg:    574.0 usec/call for generate-result
Time: 52.539998 secs. calls: 1080000 avg:     48.6 usec/call for build-interaction
Time: 179.82050 secs. calls: 145877 avg:   1232.7 usec/call for find-pubmed-id
Time: 7.6253914 secs. calls: 8853 avg:    861.3 usec/call for find-rna

Common biogrid/GO functions
Time: 113.07912 secs. calls: 10899 avg:  10375.2 usec/call for find-memberln
Time: 10.764068 secs. calls: 9464 avg:   1137.4 usec/call for find-protein-form

GO functions
Time: 113.69616 secs. calls: 1 avg: 113696159.8 usec/call for gene-go-anno
Time: 0.5844158 secs. calls: 1 avg: 584415.8 usec/call for gene-go-write
Time: 70.341993 secs. calls: 10218 avg:   6884.1 usec/call for find-go-term
Time: 24.755066 secs. calls: 11047 avg:   2240.9 usec/call for add-go-info
scheme@(guile-user)> 

orig find-mol:
Time: 167.04053 secs. calls: 3769 avg:  44319.6 usec/call for find-mol
Time: 164.07672 secs. calls: 3769 avg:  43533.2 usec/call for find-mol
Time: 185.57233 secs. calls: 3769 avg:  49236.5 usec/call for find-mol

srfi-1 find-mol:
Time: 111.73313 secs. calls: 3769 avg:  29645.3 usec/call for find-mol

de-predicate find-mol:
Time: 109.04895 secs. calls: 3769 avg:  28933.1 usec/call for find-mol
Time: 115.21986 secs. calls: 3769 avg:  30570.4 usec/call for find-mol

cached:
Time: 97.165338 secs. calls: 3769 avg:  25780.1 usec/call for find-mol
Time: 101.62701 secs. calls: 3769 avg:  26963.9 usec/call for find-mol
Time: 100.25473 secs. calls: 3769 avg:  26599.8 usec/call for find-mol

Time: 1.6998823 secs. calls: 1992 avg:    853.4 usec/call for get-mol
Time: 1.4956957 secs. calls: 1992 avg:    750.9 usec/call for get-mol



node-info
find-coding-gene


non-cached find-coding-gene:
Time: 42.131111 secs. calls: 177359 avg:    237.5 usec/call for find-coding-gene
Time: 41.810285 secs. calls: 177359 avg:    235.7 usec/call for find-coding-gene

cached version:
Time: 3.9859701 secs. calls: 177359 avg:     22.5 usec/call for find-coding-gene
Time: 1.8742897 secs. calls: 8517 avg:    220.1 usec/call for do-find-coding-gene


find-GO-ns is cacheable its in 
find-go-name is cacheable its in  go-info

go-info is cacheacble, its in add-go-info 

report find-rna cache ratio into #151
Time: 176.14719 secs. calls: 184351 avg:    955.5 usec/call for find-rna
Time: 7.1127286 secs. calls: 8853 avg:    803.4 usec/call for do-get-rna
done


pre-go-info-caching:
Time: 79.225793 secs. calls: 10218 avg:   7753.6 usec/call for find-go-term
Time: 77.238001 secs. calls: 10218 avg:   7559.0 usec/call for find-go-term

Time: 29.799717 secs. calls: 11047 avg:   2697.5 usec/call for add-go-info
Time: 28.259893 secs. calls: 11047 avg:   2558.2 usec/call for add-go-info

Time: 50.957783 secs. calls: 10218 avg:   4987.1 usec/call for find-go-term
Time: 2.4260579 secs. calls: 11047 avg:    219.6 usec/call for add-go-info
Time: 1.9518182 secs. calls: 11047 avg:    176.7 usec/call for go-info
Time: 1.8019651 secs. calls: 3449 avg:    522.5 usec/call for do-go-info

report go-info cache ratio  DONE. #155


Time: 238.57450 secs. calls: 3769 avg:  63299.2 usec/call for find-pathway-genes
Time: 174.34150 secs. calls: 182039 avg:    957.7 usec/call for add-pathway-genes
Time: 64.140769 secs. calls: 3769 avg:  17018.0 usec/call for get-pathway-genes
Time: 63.417654 secs. calls: 1992 avg:  31836.2 usec/call for do-get-pathway-genes


Well, that sucks ...

large master: 819


As of:
Mar 6 2020 9ca662eaa831cbbe5db035ccba8548acc1e5bec4 (cache-find-rna)
#151   annotation takes 1718 seconds (busy, small)

Mar 6 2020 680293ff90078a82331fa4b427c502076725deed (cache-protein-form)
#147 total time: 2255 (busy, small)

Mar 5 2020 fe74c17af7c1eb922011be12ed84b214373bb774 (defilter)
#146 4466 seconds (idle, small)

Mar 5 2020 3f2fd54ecc25e7881c61cea26c50ab12a4f13246 (get-not-bind)
#145 

Mar 2 2020 518e0fb586006cc3456059a8cb5647e2d0377e3d (unlist-node)
#137 

29 Feb 2020 0f02e658bc80416bd713e2f1cd0c4d213ac05d66 (pubmed-cache)
#136 

28 Feb 2020 50da5d9d2dae90e40a6040ffa0f6610340047648 (interactors)
#132 4502 (idle, small)

28 Feb 2020 39f4edd0e55ec5dec5eec24b700721f7610a83de (generate)
#133

25 Feb 2020 438f6218be2383b5e61e626dd5db145a2da0c87e (memoize-node-info)
#129

25 Feb 2020 f5db6fecd8bf79d6f7280be0a16488012847f436 (check-path2)
#127 lower win

25 Feb 2020 8f6eff0508cdf1ba15d309b18c69e8415c32d7dc (memoize-find-name)
#130

25 Feb 2020 453f48c3e01505420a050e4738419a9d2900da28 (memoize-locate-node)
#131

20 Feb 2020 f2127ae53fc680f3ae9054f85ecd662030a4b249 (mutation-be-gone)
#122  ram blowup

do-get-mol-ctr
do-go-info-ctr
go-info-ctr


811  833   842 816

810 831
781

330% CPU time approx. to 200%
541 
560 -- !!1502 secs in GC!!
524
530 -- 
Elapsed: 530.59 secs. Rate: 27.82 gc/min %cpu-GC: 106.4%  %cpu-use: 264.0%
Elapsed: 539.27 secs. Rate: 28.48 gc/min %cpu-GC: 113.5%  %cpu-use: 269.6%
Elapsed: 530.66 secs. Rate: 26.46 gc/min %cpu-GC: 101.6%  %cpu-use: 260.1%
Elapsed: 534.02 secs. Rate: 29.44 gc/min %cpu-GC: 114.6%  %cpu-use: 269.2%


Elapsed: 839.95 secs. Rate: 18.36 gc/min %cpu-GC: 49.94%  %cpu-use: 137.1%
Elapsed: 803.77 secs. Rate: 20.68 gc/min %cpu-GC: 53.45%  %cpu-use: 139.4%
Elapsed: 799.76 secs. Rate: 20.71 gc/min %cpu-GC: 52.68%  %cpu-use: 139.3%
Elapsed: 813.68 secs. Rate: 20.35 gc/min %cpu-GC: 52.35%  %cpu-use: 139.1%
```

Elapsed: 1385.2 secs. Rate: 12.56 gc/min %cpu-GC: 13.86%  %cpu-use: 108.1%
Elapsed: 1484.0 secs. Rate: 12.25 gc/min %cpu-GC: 17.48%  %cpu-use: 107.2%
Elapsed: 1461.2 secs. Rate: 11.87 gc/min %cpu-GC: 20.61%  %cpu-use: 109.9%

Elapsed: 1486.8 secs. Rate: 11.42 gc/min %cpu-GC: 16.69%  %cpu-use: 106.8%


total: 1.39 * 800 = 1112.0
(* 1.39 800 0.53) = 589.36

(find-protein (GeneNode gene) 1)

find-prot
filter-pathway


(define (xadd-pathway-genes pathway gene namespace-list num-parents
                coding-rna non-coding-rna do-protein)

   (define no-rna (or (null? coding-rna) (null? non-coding-rna)))
   (define no-ns (and (null? namespace-list) (= 0 num-parents)))



CLTC  TMCO1 CAND1

   (define mtx (make-mutex))

   (lambda (ITEM)
      (lock-mutex mtx)
      (let* ((val (hashx-ref atom-hash atom-assoc cache ITEM))
            (rv (if val val
                  (let ((fv (AFUNC ITEM)))
                     (hashx-set! atom-hash atom-assoc cache ITEM fv)
                     fv))))
         (unlock-mutex mtx)
         rv))

above is not exception-safe...

In procedure cog-new-link: Wrong type argument in position 2 (expecting opencog atom): #<procedure do-memoize ()>


with-mutex

In annotation/util.scm:
    175:8  2 (do-find-pathway-name _)
In unknown file:
           1 (cog-outgoing-set #<Invalid handle>)
In ice-9/boot-9.scm:

as it cog-exectue! returned null handle...


TODO: 
optimize find-memberln


(load-file Syntax error at line 237375 Bad expr:  "H"
Function args:
(/home/ubuntu/datasets/current/biogrid_gene_gene_3.5.177.scm))
uncaught throw to C++-EXCEPTION: (load-file Syntax error at line 685118 Bad expr:  "S"
Function args:
(/home/ubuntu/datasets/current/entrez_to_protein.scm))


Took 1 secs to load current/ChEBI2Reactome_PE_Pathway.txt.scm
Loaded 87980 atoms (87980.0 per sec) total atoms=88146
Took 14 secs to load current/noncodingRNA.scm

Loaded 1298181 atoms (92727.21428571429 per sec) total atoms=1386575
Took 23 secs to load current/smpdb_protein.scm
Loaded 1476378 atoms (64190.34782608696 per sec) total atoms=2863405
Took 38 secs to load current/biogrid_gene_gene_3.5.177.scm
Loaded 2929684 atoms (77096.94736842105 per sec) total atoms=2930012
Took 3 secs to load current/NCBI2Reactome_PE_Pathway.txt.scm
Loaded 277580 atoms (92526.66666666667 per sec) total atoms=3141166
Took 2 secs to load current/uniprot2GO.scm
Loaded 239194 atoms (119597.0 per sec) total atoms=3169353
Took 1 secs to load current/reactome.scm
Loaded 15563 atoms (15563.0 per sec) total atoms=3185066
Took 3 secs to load current/UniProt2Reactome_PE_Pathway.txt.scm
Loaded 282281 atoms (94093.66666666667 per sec) total atoms=3423581
Took 7 secs to load current/entrez_to_protein.scm
Loaded 576528 atoms (82361.14285714286 per sec) total atoms=4000667
Took 1 secs to load current/current_symbols.scm
Loaded 40485 atoms (40485.0 per sec) total atoms=4041437
Took 16 secs to load current/GO_annotation.scm
Loaded 981103 atoms (61318.9375 per sec) total atoms=4166277
Took 1 secs to load current/biogridgene2uniprot.scm
Loaded 87400 atoms (87400.0 per sec) total atoms=4253691
Took 10 secs to load current/codingRNA.scm
Loaded 627744 atoms (62774.4 per sec) total atoms=4881441
Took 4 secs to load current/GO.scm
Loaded 381803 atoms (95450.75 per sec) total atoms=5263252
Took 25 secs to load current/smpdb_chebi_wname.scm
Loaded 1236952 atoms (49478.08 per sec) total atoms=5278473

Loaded all the files in 75 seconds
$1 = #f

fast loader:
Took 1 secs to load current/ChEBI2Reactome_PE_Pathway.txt.scm
Loaded 39768 atoms (39768.0 per sec) total atoms=39768

slow-loader:

(cog-report-counts)


scheme@(guile-user)> (serial-load-all)
Took 3 secs to load current/ChEBI2Reactome_PE_Pathway.txt.scm
Loaded 39768 atoms (13256.0 per sec) total atoms=39768
Atomspace = ((ConceptNode . 3667) (PredicateNode . 2) (ListLink . 5782) (MemberLink . 10188) (AndLink . 12260) (EvaluationLink . 5782) (MoleculeNode . 2087))
OK

Took 171 secs to load current/biogrid_gene_gene_3.5.177.scm
Loaded 1967867 atoms (11507.994152046784 per sec) total atoms=2007635
Atomspace = ((ConceptNode . 54186) (PredicateNode . 5) (ListLink . 973402) (MemberLink . 10188) (AndLink . 12260) (EvaluationLink . 935370) (GeneNode . 20137) (MoleculeNode . 2087))
OK

Took 46 secs to load current/noncodingRNA.scm
Loaded 747216 atoms (16243.826086956522 per sec) total atoms=2754851
Atomspace = ((ConceptNode . 166947) (PredicateNode . 6) (ListLink . 1222500) (MemberLink . 10188) (AndLink . 12260) (EvaluationLink . 1184468) (GeneNode . 31846) (MoleculeNode . 126636))
OK

Took 141 secs to load current/smpdb_protein.scm
Loaded 807659 atoms (5728.078014184397 per sec) total atoms=3562510
Atomspace = ((ConceptNode . 265619) (PredicateNode . 6) (ListLink . 1272656) (MemberLink . 617356) (AndLink . 12260) (EvaluationLink . 1234624) (GeneNode . 31863) (MoleculeNode . 128126))
very short read

duuude done at line=5470687 exp=1823562

loaded 151957 atoms for fast load
Atomspace = ((ConceptNode . 98795) (PredicateNode . 1) (ListLink . 50156) (MemberLink . 1) (EvaluationLink . 1514) (MoleculeNode . 1490))

vs. slow only:
Loaded 809190 atoms (5906.496350364963 per sec) total atoms=809190
Atomspace = ((ConceptNode . 98795) (PredicateNode . 1) (ListLink . 50156) (MemberLink . 607168) (EvaluationLink . 50156) (GeneNode . 1424) (MoleculeNode . 1490))



Took 15 secs to load current/NCBI2Reactome_PE_Pathway.txt.scm
Loaded 110007 atoms (7333.8 per sec) total atoms=3672517
Atomspace = ((ConceptNode . 266002) (PredicateNode . 6) (ListLink . 1287467) (MemberLink . 655241) (AndLink . 54042) (EvaluationLink . 1249435) (GeneNode . 32198) (MoleculeNode . 128126))

Took 9 secs to load current/uniprot2GO.scm
Loaded 137023 atoms (15224.777777777777 per sec) total atoms=3809540
Atomspace = ((ConceptNode . 271446) (PredicateNode . 6) (ListLink . 1287467) (MemberLink . 752670) (AndLink . 54042) (EvaluationLink . 1249435) (GeneNode . 32198) (MoleculeNode . 162276))

Took 17 secs to load current/UniProt2Reactome_PE_Pathway.txt.scm
Loaded 158124 atoms (9301.411764705883 per sec) total atoms=3967664
Atomspace = ((ConceptNode . 282409) (PredicateNode . 6) (ListLink . 1314314) (MemberLink . 792856) (AndLink . 98788) (EvaluationLink . 1276282) (GeneNode . 32198) (MoleculeNode . 170811))

Took 1 secs to load current/reactome.scm
Loaded 9564 atoms (9564.0 per sec) total atoms=3977228
Atomspace = ((ConceptNode . 285090) (PredicateNode . 6) (ListLink . 1316601) (MemberLink . 792856) (AndLink . 98788) (EvaluationLink . 1278569) (InheritanceLink . 2309) (GeneNode . 32198) (MoleculeNode . 170811))
`
Took 85 secs to load current/GO_annotation.scm
Loaded 354080 atoms (4165.64705882353 per sec) total atoms=4331308
Atomspace = ((ConceptNode . 314692) (PredicateNode . 6) (ListLink . 1336210) (MemberLink . 1077337) (AndLink . 98788) (EvaluationLink . 1298178) (InheritanceLink . 2309) (GeneNode . 32977) (MoleculeNode . 170811))
n
Took 30 secs to load current/entrez_to_protein.scm
Loaded 419423 atoms (13980.766666666666 per sec) total atoms=4750731
Atomspace = ((ConceptNode . 317602) (PredicateNode . 7) (ListLink . 1489210) (MemberLink . 1077337) (AndLink . 98788) (EvaluationLink . 1451178) (InheritanceLink . 2309) (GeneNode . 38861) (MoleculeNode . 275439))

Took 2 secs to load current/current_symbols.scm
Loaded 31782 atoms (15891.0 per sec) total atoms=4782513
Atomspace = ((ConceptNode . 317602) (PredicateNode . 8) (ListLink . 1500017) (MemberLink . 1077337) (AndLink . 98788) (EvaluationLink . 1461990) (InheritanceLink . 2309) (GeneNode . 49023) (MoleculeNode . 275439))

Took 186 secs to load current/smpdb_chebi_wname.scm
Loaded 923462 atoms (4964.8494623655915 per sec) total atoms=5705975
Atomspace = ((ConceptNode . 367360) (PredicateNode . 8) (ListLink . 1549825) (MemberLink . 1850528) (AndLink . 98788) (EvaluationLink . 1511798) (InheritanceLink . 2309) (GeneNode . 49023) (MoleculeNode . 276336))
`n

Took 7 secs to load current/biogridgene2uniprot.scm
Loaded 83949 atoms (11992.714285714286 per sec) total atoms=5789924
Atomspace = ((ConceptNode . 383794) (PredicateNode . 9) (ListLink . 1583581) (MemberLink . 1850528) (AndLink . 98788) (EvaluationLink . 1545554) (InheritanceLink . 2309) (GeneNode . 49023) (MoleculeNode . 276338))

Took 47 secs to load current/codingRNA.scm
Loaded 597595 atoms (12714.787234042553 per sec) total atoms=6387519
Atomspace = ((ConceptNode . 383794) (PredicateNode . 10) (ListLink . 1836079) (MemberLink . 1850528) (AndLink . 98788) (EvaluationLink . 1798052) (InheritanceLink . 2309) (GeneNode . 49050) (MoleculeNode . 368909))

Took 24 secs to load current/GO.scm
Loaded 369815 atoms (15408.958333333334 per sec) total atoms=6757334
Atomspace = ((ConceptNode . 454779) (PredicateNode . 12) (ListLink . 1925554) (MemberLink . 1850528) (AndLink . 98788) (EvaluationLink . 1887530) (InheritanceLink . 122184) (GeneNode . 49050) (MoleculeNode . 368909))


Loaded all the files in 783 seconds
$1 = #f
scheme@(guile-user)> (* 16 60)
$2 = 960
scheme@(guile-user)> (gc-stats)
$3 = ((gc-time-taken . 352806224189) (heap-size . 9469952) (heap-free-size . 356352) (heap-total-allocated . 50755714736) (heap-allocated-since-gc . 3896160) (protected-objects . 1) (gc-times . 12501))
scheme@(guile-user)> 

load-file" "Syntax error at line 15 Expecting an Atom\nFunction args:\n(/home/ubuntu/datasets/current/GO_annotation.scm)")'.

 `("load-file" "Syntax error at line 1292 Unknown Atom type: stv\nFunction args:\n(/home/ubuntu/datasets/current/GO_annotation.scm)")'.

Loaded all the files in 100 seconds


start 11PM
libhugetlbfs: WARNING: New heap segment map at 0x56416f200000 failed: Cannot allocate memory
Tetra done 500/49050 in 17337.856600675 secs rate=0.03 gene/sec elapsed=17338.

start 12 PM
Tetra done 500/49050 in 20950.681026636 secs rate=0.02 gene/sec elapsed=20951.
Tetra done 1000/49050 in 24486.234528364 secs rate=0.02 gene/sec elapsed=45437.
Tetra done 1500/49050 in 16955.569550114 secs rate=0.02 gene/sec elapsed=62392.

so six hours a pop. Yuck.


Do it again, w/ multi-term direct lookup.
start noon
(count-tetrahedra (cog-get-atoms 'GeneNode))
Tetra done 500/49050 in 19338.284680108 secs rate=0.03 gene/sec elapsed=19338.

That's still very losing.
Do it again with single-term nack.
Tetra done 50/49050 in 357. secs rate=0.14 gene/sec elapsed=356.52
Tetra done 100/49050 in 1039.608528079 secs rate=0.07 gene/sec elapsed=1396.1
Tetra done 150/49050 in 461. secs rate=0.08 gene/sec elapsed=1857.2
Tetra done 200/49050 in 3275.171936237 secs rate=0.04 gene/sec elapsed=5132.3
Tetra done 250/49050 in 1788.034691459 secs rate=0.04 gene/sec elapsed=6920.4
Tetra done 300/49050 in 5327.730933101 secs rate=0.02 gene/sec elapsed=12248.
Tetra done 350/49050 in 1070.717004326 secs rate=0.03 gene/sec elapsed=13319.
Tetra done 400/49050 in 2380.923876091 secs rate=0.03 gene/sec elapsed=15700.
Tetra done 450/49050 in 1136.927697364 secs rate=0.03 gene/sec elapsed=16837.
Tetra done 500/49050 in 1649.0929973 secs rate=0.03 gene/sec elapsed=18486.
---

nack, again, top window. grid - 17003  pid 25173
Tetra done 50/49050 in 316. secs rate=0.16 gene/sec elapsed=316.43
Tetra done 100/49050 in 1035.593670248 secs rate=0.07 gene/sec elapsed=1352.0
Tetra done 150/49050 in 440. secs rate=0.08 gene/sec elapsed=1791.8
Tetra done 200/49050 in 3187.839275803 secs rate=0.04 gene/sec elapsed=4979.6
Tetra done 250/49050 in 1778.740378956 secs rate=0.04 gene/sec elapsed=6758.4
Tetra done 300/49050 in 5392.000219301 secs rate=0.02 gene/sec elapsed=12150.
Tetra done 350/49050 in 1013.945399951 secs rate=0.03 gene/sec elapsed=13164.
Tetra done 400/49050 in 2233.991115707 secs rate=0.03 gene/sec elapsed=15398.
Tetra done 450/49050 in 1052.103571174 secs rate=0.03 gene/sec elapsed=16450.
Tetra done 500/49050 in 1659.771027799 secs rate=0.03 gene/sec elapsed=18110.
Tetra done 750/49050 in 2128.220208645 secs rate=0.03 gene/sec elapsed=29242.
Tetra done 1000/49050 in 5811.322509432 secs rate=0.02 gene/sec elapsed=41368.
Tetra done 1250/49050 in 1091.630218217 secs rate=0.03 gene/sec elapsed=49078.
Tetra done 1500/49050 in 1360.187493002 secs rate=0.03 gene/sec elapsed=57795.
Tetra done 1750/49050 in 1968.218188658 secs rate=0.03 gene/sec elapsed=69280.
Tetra done 2000/49050 in 1794.409534285 secs rate=0.03 gene/sec elapsed=76248.
Tetra done 2500/49050 in 1830.48523792 secs rate=0.02 gene/sec elapsed=117488.873815013




full-on caching: (middle window) 17001  pid 21984
Tetra done 50/49050 in 346. secs rate=0.14 gene/sec elapsed=346.49
Tetra done 100/49050 in 1074.988594294 secs rate=0.07 gene/sec elapsed=1421.5
Tetra done 150/49050 in 478. secs rate=0.08 gene/sec elapsed=1899.7
Tetra done 200/49050 in 3377.544715255 secs rate=0.04 gene/sec elapsed=5277.3
Tetra done 250/49050 in 1948.473661945 secs rate=0.03 gene/sec elapsed=7225.7
Tetra done 300/49050 in 5827.518502177 secs rate=0.02 gene/sec elapsed=13053.
Tetra done 350/49050 in 1183.467971937 secs rate=0.02 gene/sec elapsed=14237.
Tetra done 400/49050 in 2488.720730604 secs rate=0.02 gene/sec elapsed=16725.
Tetra done 450/49050 in 1216.253035126 secs rate=0.03 gene/sec elapsed=17942.
Tetra done 500/49050 in 1710.973150912 secs rate=0.03 gene/sec elapsed=19653.
Tetra done 750/49050 in 2178.701768439 secs rate=0.02 gene/sec elapsed=30770.
Tetra done 1000/49050 in 5775.104894568 secs rate=0.02 gene/sec elapsed=43048.
Tetra done 1250/49050 in 1109.929086878 secs rate=0.02 gene/sec elapsed=50797.
Tetra done 1500/49050 in 1389.160560156 secs rate=0.03 gene/sec elapsed=59690.
Tetra done 1750/49050 in 1993.288869844 secs rate=0.02 gene/sec elapsed=71182.
Tetra done 2000/49050 in 1851.521040398 secs rate=0.03 gene/sec elapsed=78254.
Tetra done 2500/49050 in 1966.789259385 secs rate=0.02 gene/sec elapsed=119688.326560214
Tetra done 2750/49050 in 5350.045062939 secs rate=0.02 gene/sec elapsed=137571.242393373





Master: only the old positive single-term cache.
bottom window path.conf 17002  pid 23621
Tetra done 50/49050 in 392. secs rate=0.13 gene/sec elapsed=391.98
Tetra done 100/49050 in 1249.435502896 secs rate=0.06 gene/sec elapsed=1641.4
Tetra done 150/49050 in 491. secs rate=0.07 gene/sec elapsed=2132.6
Tetra done 200/49050 in 3479.214295589 secs rate=0.04 gene/sec elapsed=5611.9
Tetra done 250/49050 in 2015.037010913 secs rate=0.03 gene/sec elapsed=7626.9
Tetra done 300/49050 in 5693.471465538 secs rate=0.02 gene/sec elapsed=13320.
Tetra done 350/49050 in 1111.049545066 secs rate=0.02 gene/sec elapsed=14431.
Tetra done 400/49050 in 2328.927740838 secs rate=0.02 gene/sec elapsed=16760.
Tetra done 450/49050 in 1224.662314804 secs rate=0.03 gene/sec elapsed=17985.
Tetra done 500/49050 in 1935.730680506 secs rate=0.03 gene/sec elapsed=19921.
Tetra done 750/49050 in 2393.589804218 secs rate=0.02 gene/sec elapsed=32555.
Tetra done 1000/49050 in 6551.784415314 secs rate=0.02 gene/sec elapsed=46234.
Tetra done 1250/49050 in 1219.161454083 secs rate=0.02 gene/sec elapsed=54747.
Tetra done 1500/49050 in 1475.835604819 secs rate=0.02 gene/sec elapsed=64318.
Tetra done 2000/49050 in 1974.580412704 secs rate=0.02 gene/sec elapsed=84589.
Tetra done 2500/49050 in 1944.352487444 secs rate=0.02 gene/sec elapsed=128645.84323927




Oh no - Obtained 1797281 triangles in 3046.1 seconds

